6> Design Verilog program to implement Different types of multiplexer like 2:1, 4:1 and 8:1.


module mux_21(I,sel,Y);
	input [1:0]I;
	input sel;
	output reg Y;
	
	always@(*)
		begin
			case(sel)
				1'b0: Y=I[0];
				1'b1: Y=I[1];
				default: Y=1'b0;
			endcase
		end
endmodule
	


module mux_41(I,sel,Y);
	input [3:0]I;
	input [1:0]sel;
	output reg Y;
	
	always@(*)
		begin
			case(sel)
				2'b00: Y=I[0];
				2'b01: Y=I[1];
				2'b10: Y=I[2];
				2'b11: Y=I[3];
				default: Y=2'b00;
			endcase
		end
endmodule
	


module mux_81(I,sel,Y);
	input [7:0]I;
	input [2:0]sel;
	output reg Y;
	
	always@(*)
		begin
			case(sel)
				3'b000: Y=I[0];
				3'b001: Y=I[1];
				3'b010: Y=I[2];
				3'b011: Y=I[3];
				3'b100: Y=I[4];
				3'b101: Y=I[5];
				3'b110: Y=I[6];
				3'b111: Y=I[7];
				default: Y=3'b000;
			endcase
		end
endmodule
	