3> Design Verilog HDL to implement simple circuits using structural, Data flow and Behavioural model


module Half_Adder_SM(a,b,sum,cout);
	input a,b;
	output sum,cout;
	
	xor x1(sum,a,b);
	and a1(cout,a,b);
	
endmodule 


module Half_Adder_BM(a,b,sum,cout);
	input a,b;
	output reg sum,cout;
	
	always@(*)
		begin
			case({a,b})
				2'b00: sum = 0;
				2'b01: sum = 1;
				2'b10: sum = 1;
				2'b11: sum = 0;
				default: sum = 0;
			endcase
			
			case({a,b})
				2'b00: cout = 0;
				2'b01: cout = 0;
				2'b10: cout = 0;
				2'b11: cout = 1;
				default: cout = 0;
			endcase
		end
endmodule
	


module Half_Adder_DF(input A, input B, output sum, output carry);
	assign sum = A ^ B;
	assign carry = A & B;
endmodule 